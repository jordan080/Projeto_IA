{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"PNGs_Kaggle","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNFjiqeXTS3zgzY6+l+BUFJ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"yw_YXpgg-Vy1"},"source":["#Célula usada apenas para debug, ela apaga uma pasta criada pelo código abaixo.\n","import shutil\n","\n","shutil.rmtree('nn_train_600')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bwjb6WLXZCEF"},"source":["# Organização do Dataset (por José Augusto):\n","\n","*   Criação das pastas necessárias\n","*   Separação em treinamento e teste\n","*   Cópia dos arquivos\n"]},{"cell_type":"code","metadata":{"id":"LIVMPjemvI9Q"},"source":["from google.colab import drive\n","\n","drive.mount(\"/content/gdrive\", force_remount=True)\n","\n","import pandas as pd\n","import shutil\n","import glob\n","from sklearn.model_selection import train_test_split\n","import os\n","\n","study_level = pd.read_csv(\"gdrive/MyDrive/covid-dataset/train_study_level.csv\")\n","image_level = pd.read_csv(\"gdrive/MyDrive/covid-dataset/train_image_level.csv\")\n","\n","study_level['study_name'] = study_level['id'].apply(lambda x: x.replace('_study', ''))\n","\n","df = pd.DataFrame()\n","\n","df['image_name'] = image_level['id'].apply(lambda x: x.replace('_image', ''))\n","df['study_name'] = image_level['StudyInstanceUID']\n","\n","merge = pd.merge(df, study_level, on='study_name')\n","\n","r0 = merge['Typical Appearance'].apply(lambda x: 'typical' if x == 1 else False)\n","r1 = merge['Atypical Appearance'].apply(lambda x: 'atypical' if x == 1 else False)\n","r2 = merge['Indeterminate Appearance'].apply(lambda x: 'indeterminate' if x == 1 else False)\n","\n","labels = []\n","\n","for a,b,c in zip(r0, r1, r2):\n","  if a != False:\n","    labels.append(a)\n","    continue\n","  if b != False:\n","    labels.append(b)\n","    continue\n","  if c != False:\n","    labels.append(c)\n","    continue\n","\n","  labels.append('not recognized')\n","\n","merge['label'] = labels\n","\n","\n","## Criem uma pasta na raiz do seu drive \"gdrive/MyDrive/covid-dataset/\" e\n","## copiem o arquivo https://drive.google.com/file/d/1asNV1LAUf32JskYSpplUQgmjQf0W5eLZ/view?usp=sharing\n","## pra ela. tudo deve rodar ok, e vc tera os datagen para o treino e validação\n","shutil.copy('gdrive/MyDrive/covid-dataset/nn_train_600.zip', './')\n","\n","!unzip -qq nn_train_600.zip\n","\n","img_df = pd.DataFrame()\n","\n","paths = glob.glob('./nn_train_600/**/*.png', recursive=True)\n","\n","img_df['path'] = paths\n","img_df['image_name'] = img_df['path'].apply(lambda x: x.split('/')[-1].replace('.png', ''))\n","\n","fndf = pd.merge(merge, img_df, on='image_name')\n","\n","X, y = fndf['path'], fndf['label']\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n","\n","os.makedirs('train/typical', exist_ok=True)\n","os.makedirs('train/indeterminate', exist_ok=True)\n","os.makedirs('train/atypical', exist_ok=True)\n","\n","os.makedirs('test/typical', exist_ok=True)\n","os.makedirs('test/indeterminate', exist_ok=True)\n","os.makedirs('test/atypical', exist_ok=True)\n","\n","def distribute_images(_paths, _labels, _folder):\n","  for path, label in zip(_paths, _labels):\n","    shutil.copy(path, _folder + '/' + label)\n","\n","distribute_images(X_train, y_train, 'train')\n","distribute_images(X_test, y_test, 'test')\n","\n","\"\"\"## Fine-tuning EfficientNet\"\"\"\n","\n","import tensorflow as tf\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.applications import EfficientNetB0, EfficientNetB1, EfficientNetB2, EfficientNetB3, EfficientNetB4, EfficientNetB5, EfficientNetB6, EfficientNetB7\n","from tensorflow.keras import models\n","from tensorflow.keras import layers\n","from tensorflow.keras import optimizers\n","\n","try:\n","    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()  # TPU detection\n","    print(\"Running on TPU \", tpu.cluster_spec().as_dict()[\"worker\"])\n","    tf.config.experimental_connect_to_cluster(tpu)\n","    tf.tpu.experimental.initialize_tpu_system(tpu)\n","    strategy = tf.distribute.TPUStrategy(tpu)\n","except ValueError:\n","    print(\"Not connected to a TPU runtime. Using CPU/GPU strategy\")\n","    strategy = tf.distribute.MirroredStrategy()\n","\n","batch_size = 64\n","height = 456\n","width = 456\n","input_shape = (height, width, 3)\n","\n","with strategy.scope():\n","  train_datagen = ImageDataGenerator(\n","        rescale=1,\n","        rotation_range=10,\n","        width_shift_range=0.1,\n","        height_shift_range=0.1,\n","        shear_range=0.1,\n","        zoom_range=0.1,\n","        horizontal_flip=True,)\n","\n","  # Note that the validation data should not be augmented!\n","  test_datagen = ImageDataGenerator(rescale=1)\n","\n","  train_generator = train_datagen.flow_from_directory(\n","          # This is the target directory\n","          \"train\",\n","          # All images will be resized to target height and width.\n","          target_size=(height, width),\n","          batch_size=batch_size,\n","          # Since we use categorical_crossentropy loss, we need categorical labels\n","          class_mode='categorical')\n","\n","  validation_generator = test_datagen.flow_from_directory(\n","          \"test\",\n","          target_size=(height, width),\n","          batch_size=batch_size,\n","          class_mode='categorical', shuffle=False)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"29_NEZGvZytl"},"source":["# Criação das pasta onde iremos guardar os pastas separadas por tipo\n"," Após isso, elas irão ser movidas para o Google Drive.\n"]},{"cell_type":"code","metadata":{"id":"jWb-PRgUDgfU"},"source":["import os\n","\n","if not os.path.exists('/content/gdrive/MyDrive/covid-dataset/data'):\n","    os.mkdir('/content/gdrive/MyDrive/covid-dataset/data')\n","    print(\"Pasta criada\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":52},"id":"Z1H06FgwIGp-","executionInfo":{"status":"ok","timestamp":1632356121543,"user_tz":180,"elapsed":36638,"user":{"displayName":"Jordan Antonio dos Santos","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gihs2ildVDumDG4BhDhuBGNFwpPFszqCFXw3vdz=s64","userId":"07153548098412070496"}},"outputId":"da8d053d-b463-426f-f6fb-18c896c8201e"},"source":["#Criar a pasta \"typical\" e mover os arquivos para lá\n","\n","import shutil\n","import os\n","\n","if not os.path.exists('typical'):\n","    os.mkdir('typical')\n","    print(\"Pasta criada\")\n","  \n","source_1 = \"test/typical\"\n","source_2 = \"train/typical\"\n","destination = \"typical\"\n","  \n","files = os.listdir(source_1)\n","for file in files:\n","    file_name = os.path.join(source_1, file)\n","    shutil.move(file_name, destination)\n","\n","files = os.listdir(source_2)\n","for file in files:\n","    file_name = os.path.join(source_2, file)\n","    shutil.move(file_name, destination)\n","\n","source = \"typical\"\n","destination = \"/content/gdrive/MyDrive/covid-dataset/data\"\n","\n","shutil.move(source, destination)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Pasta criada\n"]},{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'/content/gdrive/MyDrive/covid-dataset/typical'"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":52},"id":"vBXlR9iZKHMe","executionInfo":{"status":"ok","timestamp":1632357479646,"user_tz":180,"elapsed":23438,"user":{"displayName":"Jordan Antonio dos Santos","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gihs2ildVDumDG4BhDhuBGNFwpPFszqCFXw3vdz=s64","userId":"07153548098412070496"}},"outputId":"27dad04f-503c-4555-c171-1e5f0a2fe68b"},"source":["#Criar a pasta \"atypical-indeterminate\" e mover os arquivos pra lá\n","\n","if not os.path.exists('atypical-indeterminate'):\n","    os.mkdir('atypical-indeterminate')\n","    print(\"Pasta criada\")\n","  \n","source_1 = \"test/atypical\"\n","source_2 = \"train/atypical\"\n","destination = \"atypical-indeterminate\"\n","  \n","files = os.listdir(source_1)\n","for file in files:\n","    file_name = os.path.join(source_1, file)\n","    shutil.move(file_name, destination)\n","\n","files = os.listdir(source_2)\n","for file in files:\n","    file_name = os.path.join(source_2, file)\n","    shutil.move(file_name, destination)\n","\n","source_3 = \"test/indeterminate\"\n","source_4 = \"train/indeterminate\"\n","  \n","files = os.listdir(source_3)\n","for file in files:\n","    file_name = os.path.join(source_3, file)\n","    shutil.move(file_name, destination)\n","\n","files = os.listdir(source_4)\n","for file in files:\n","    file_name = os.path.join(source_4, file)\n","    shutil.move(file_name, destination)\n","\n","source = \"atypical-indeterminate\"\n","destination = \"/content/gdrive/MyDrive/covid-dataset/data\"\n","\n","shutil.move(source, destination)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Pasta criada\n"]},{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'/content/gdrive/MyDrive/covid-dataset/atypical-indeterminate'"]},"metadata":{},"execution_count":22}]}]}